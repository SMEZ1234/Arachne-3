import os, re, json

class TemplateManager:
    def __init__(self, variableFilename):
        self.variableFilename = variableFilename

        with open(self.variableFilename, "r") as f:
            self.definitions = json.load(f)

    def preprocess(self):
        with open(f"{self.definitions['file']}.jgn", "r") as f:
            template = f.read()

        # Trim whitespace
        trimmedTemplate = re.sub(r"[ \t]*\n", r"\n", template)

        if trimmedTemplate != template:
            # with open(f"{self.definitions['file']}_orig.jgn", "w") as f:
            #     f.write(template)

            with open(f"{self.definitions['file']}.jgn", "w") as f:
                f.write(trimmedTemplate)

    def generate(self):
        with open(f"{self.definitions['file']}.jgn", "r") as f:
            template = f.read()

        for form in self.definitions["forms"]:
            header = "\n".join([
                "/*",
               f" * This file was auto-generated by Arachne's Template Manager.",
                " * Edits made to this file will be overridden on regeneration.",
                " *",
               f" * Template file: {self.definitions['file']}.jgn",
               f" * Variable definitions: {self.variableFilename}",
               f" * Label used: {form['label']}",
                " */"
            ])

            output = template

            # Add imports
            importString = ""

            for entry in form["imports"]:
                importString += f"import {entry};\n" if entry != "" else "\n"

            output = re.sub(r"#imports\s*?\n", importString, output)

            # Add javadoc
            for label, entry in form["javadoc"].items():
                javadocString = ""
                indentation = "\t" * entry["indents"]

                for line in entry["lines"]:
                    javadocString += f"{indentation} * {line}\n"

                output = re.sub("#javadoc " + label + r"\s*?\n", javadocString, output)

            # Handle conditionals
            ifs = re.findall(r"(#if ([^\n]+?)\n(.*?)#endif\n)", output, flags=re.DOTALL)

            for conditional in ifs:
                conditionalString, condition, replacement = conditional

                if not self.evalCondition(form["label"], condition):
                    replacement = ""

                output = output.replace(conditionalString, replacement)

            ifns = re.findall(r"(#ifn ([^\n]+?)\n(.*?)#endif\n)", output, flags=re.DOTALL)

            for conditional in ifns:
                conditionalString, condition, replacement = conditional

                if self.evalCondition(form["label"], condition):
                    replacement = ""

                output = output.replace(conditionalString, replacement)

            # Replace variables
            for variable, value in form["variables"].items():
                output = output.replace(f"${variable}$", value)

            # Write file
            os.makedirs(self.definitions["dest"], exist_ok=True)

            with open(os.path.join(self.definitions["dest"], f"{form['filename']}.java"), "w+") as f:
                f.write(f"{header}\n{output}")

    def evalCondition(self, label, condition):
        options = re.split(r"\s+", condition.strip())
        return label in options

if __name__ == "__main__":
    for filename in os.listdir("."):
        if filename.endswith(".json"):
            tm = TemplateManager(filename)
            tm.preprocess()
            tm.generate()