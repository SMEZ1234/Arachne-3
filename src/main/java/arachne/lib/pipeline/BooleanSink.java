/*
 * This file was auto-generated by Arachne's Template Manager.
 * Edits made to this file will be overridden on regeneration.
 *
 * Template file: Sink.jgn
 * Variable definitions: Sink.json
 * Label used: Boolean
 */
package arachne.lib.pipeline;

import arachne.lib.function.BooleanPredicate;
import arachne.lib.io.GettableBoolean;
import arachne.lib.io.SettableBoolean;
import arachne.lib.logging.ArachneLogger;

/**
 * A primitive type specialization of {@link Sink} for {@code boolean}.
 *
 * @author Sean Zammit
 */
public class BooleanSink implements GettableBoolean, SettableBoolean
{
	protected boolean value;

	protected BooleanPredicate filter;
	protected BooleanPredicate modifier;

	/**
	 * Constructor for a BooleanSink.
	 *
	 * @param initialValue The initial value held by the BooleanSink.
	 */
	public BooleanSink(boolean initialValue) {
		this.value = initialValue;

		this.filter = tautology();
		this.modifier = identity();
	}

	/**
	 * Get the current value held by the BooleanSink.
	 */
	@Override
	public boolean get() {
		return value;
	}

	/**
	 * Accept a new value. If the new value passes the BooleanSink's filter, then it
	 * will be passed through the modifier and the BooleanSink's value will be changed
	 * to the result.
	 */
	@Override
	public void accept(boolean value) {
		if(filter.test(value)) overwriteValue(modifier.test(value));
	}

	/**
	 * Overwrite the value stored in the BooleanSink.
	 *
	 * @param value The new value to store.
	 *
	 * @return The previous value that was stored.
	 */
	protected boolean overwriteValue(boolean value) {
		boolean oldValue = this.value;
		this.value = value;

		return oldValue;
	}

	/**
	 * Set the modifier to be applied to values accepted by the BooleanSink.
	 *
	 * @param modifier The modifier to apply. Should not be null.
	 *
	 * @return The modifier applied.
	 */
	public BooleanSink setModifier(BooleanPredicate modifier) {
		if(modifier == null) {
			ArachneLogger.getInstance().error("Tried to set BooleanSink modifier to null... changing to identity instead");

			this.modifier = identity();
			return this;
		}

		this.modifier = modifier;
		return this;
	}

	/**
	 * Clear the modifier applied to values accepted by the BooleanSink.
	 */
	public void clearModifier() {
		this.modifier = identity();
	}

	/**
	 * Set the filter used to test values accepted by the BooleanSink.
	 *
	 * @param filter The filter to apply. Should not be null.
	 *
	 * @return The filter applied.
	 */
	public BooleanSink setFilter(BooleanPredicate filter) {
		if(filter == null) {
			ArachneLogger.getInstance().error("Tried to set BooleanSink filter to null... changing to tautology instead");

			this.filter = tautology();
			return this;
		}

		this.filter = filter;
		return this;
	}

	/**
	 * Clear the filter testing values accepted by the BooleanSink.
	 */
	public void clearFilter() {
		this.filter = tautology();
	}

	/**
	 * Static helper function to return an identity for modifying.
	 *
	 * @return A BooleanPredicate that returns the input value.
	 */
	protected static BooleanPredicate identity() {
		return (value) -> value;
	}
	/**
	 * Static helper function to return a tautology for filtering.
	 *
	 * @return A BooleanPredicate that always returns true.
	 */
	protected static BooleanPredicate tautology() {
		return (value) -> true;
	}
}
