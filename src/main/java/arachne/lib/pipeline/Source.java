/*
 * This file was auto-generated by Arachne's Template Manager.
 * Edits made to this file will be overridden on regeneration.
 *
 * Template file: Source.jgn
 * Variable definitions: Source.json
 * Label used: Generic
 */
package arachne.lib.pipeline;

import java.util.function.BiPredicate;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.ToDoubleFunction;

import arachne.lib.io.Gettable;
import arachne.lib.io.Settable;
import arachne.lib.pipeline.translators.ToBooleanTranslator;
import arachne.lib.pipeline.translators.ToDoubleTranslator;
import arachne.lib.pipeline.translators.Translator;

import arachne.lib.listeners.ReadOnlySignal;
import arachne.lib.listeners.Signal;

public interface Source<T> extends Gettable<T>
{
	<SettableT extends Settable<T>> SettableT attach(SettableT settable);
	<ListenerT extends Listener<T>> ListenerT attachListener(ListenerT listener);

	boolean detach(Settable<T> settable);
	boolean detachListener(Listener<T> listener);
	void detachAll();

	default <U> Source<U> attachTranslator(Function<T, U> translation) {
		return attach(new Translator<T, U>(get(), translation));
	}

	default BooleanSource attachTranslatorToBoolean(Predicate<T> translation) {
		return attach(new ToBooleanTranslator<T>(get(), translation));
	}

	default DoubleSource attachTranslatorToDouble(ToDoubleFunction<T> translation) {
		return attach(new ToDoubleTranslator<T>(get(), translation));
	}

	default ReadOnlySignal toSignalIf(Predicate<T> condition) {
		Signal signal = new Signal();

		attach((value) -> {
			if(condition.test(value)) signal.fire();
		});

		return signal;
	}

	default ReadOnlySignal toSignalIf(BiPredicate<T, T> condition) {
		Signal signal = new Signal();

		attachListener((oldValue, newValue) -> {
			if(condition.test(oldValue, newValue)) signal.fire();
		});

		return signal;
	}
}
