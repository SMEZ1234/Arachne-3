/*
 * This file was auto-generated by Arachne's Template Manager.
 * Edits made to this file will be overridden on regeneration.
 *
 * Template file: Pipe.jgn
 * Variable definitions: Pipe.json
 * Label used: Double
 */
package arachne.lib.pipeline;

import java.util.HashSet;
import java.util.Set;

import java.util.function.DoublePredicate;
import java.util.function.DoubleUnaryOperator;

import arachne.lib.io.SettableDouble;

public class DoublePipe extends DoubleSink implements DoubleSource
{
	protected final Set<SettableDouble> outputs;
	protected final Set<DoubleListener> listeners;

	public DoublePipe(double initialValue) {
		super(initialValue);

		this.outputs = new HashSet<SettableDouble>();
		this.listeners = new HashSet<DoubleListener>();
	}

	@Override
	protected double overwriteValue(double value) {
		double oldValue = super.overwriteValue(value);

		for(SettableDouble output : outputs) output.accept(value);
		for(DoubleListener listener : listeners) listener.onChange(oldValue, value);

		return oldValue;
	}

	@Override
	public DoublePipe setModifier(DoubleUnaryOperator modifier) {
		return (DoublePipe) super.setModifier(modifier);
	}

	@Override
	public DoublePipe setFilter(DoublePredicate filter) {
		return (DoublePipe) super.setFilter(filter);
	}

	@Override
	public <SettableT extends SettableDouble> SettableT attach(SettableT settable) {
		outputs.add(settable);
		return settable;
	}

	@Override
	public <ListenerT extends DoubleListener> ListenerT attachListener(ListenerT listener) {
		listeners.add(listener);
		return listener;
	}

	@Override
	public boolean detach(SettableDouble settable) {
		return outputs.remove(settable);
	}

	@Override
	public boolean detachListener(DoubleListener listener) {
		return listeners.remove(listener);
	}

	@Override
	public void detachAll() {
		outputs.clear();
		listeners.clear();
	}
}
