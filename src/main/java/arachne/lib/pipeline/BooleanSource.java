/*
 * This file was auto-generated by Arachne's Template Manager.
 * Edits made to this file will be overridden on regeneration.
 *
 * Template file: Source.jgn
 * Variable definitions: Source.json
 * Label used: Boolean
 */
package arachne.lib.pipeline;

import arachne.lib.function.BooleanBiPredicate;
import arachne.lib.function.BooleanFunction;
import arachne.lib.function.BooleanPredicate;
import arachne.lib.function.BooleanToDoubleFunction;
import arachne.lib.io.GettableBoolean;
import arachne.lib.io.SettableBoolean;
import arachne.lib.pipeline.translators.BooleanToDoubleTranslator;
import arachne.lib.pipeline.translators.FromBooleanTranslator;

import arachne.lib.listeners.ReadOnlySignal;
import arachne.lib.listeners.Signal;

public interface BooleanSource extends GettableBoolean
{
	<SettableT extends SettableBoolean> SettableT attach(SettableT settable);
	<ListenerT extends BooleanListener> ListenerT attachListener(ListenerT listener);

	boolean detach(SettableBoolean settable);
	boolean detachListener(BooleanListener listener);
	void detachAll();

	default <U> Source<U> attachTranslator(BooleanFunction<U> translation) {
		return attach(new FromBooleanTranslator<U>(get(), translation));
	}

	default DoubleSource attachTranslatorToDouble(BooleanToDoubleFunction translation) {
		return attach(new BooleanToDoubleTranslator(get(), translation));
	}

	default ReadOnlySignal toSignal() {
		return toSignalIf((value) -> value);
	}

	default ReadOnlySignal toSignalIf(BooleanPredicate condition) {
		Signal signal = new Signal();

		attach((value) -> {
			if(condition.test(value)) signal.fire();
		});

		return signal;
	}

	default ReadOnlySignal toSignalIf(BooleanBiPredicate condition) {
		Signal signal = new Signal();

		attachListener((oldValue, newValue) -> {
			if(condition.test(oldValue, newValue)) signal.fire();
		});

		return signal;
	}
}
