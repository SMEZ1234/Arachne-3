/*
 * This file was auto-generated by Arachne's Template Manager.
 * Edits made to this file will be overridden on regeneration.
 *
 * Template file: Sink.jgn
 * Variable definitions: Sink.json
 * Label used: Double
 */
package arachne.lib.pipeline;

import java.util.function.DoublePredicate;
import java.util.function.DoubleUnaryOperator;

import arachne.lib.io.GettableDouble;
import arachne.lib.io.SettableDouble;
import arachne.lib.logging.ArachneLogger;

/**
 * A primitive type specialization of {@link Sink} for {@code double}.
 *
 * @author Sean Zammit
 */
public class DoubleSink implements GettableDouble, SettableDouble
{
	protected double value;

	protected DoublePredicate filter;
	protected DoubleUnaryOperator modifier;

	/**
	 * Constructor for a DoubleSink.
	 *
	 * @param initialValue The initial value held by the DoubleSink.
	 */
	public DoubleSink(double initialValue) {
		this.value = initialValue;

		this.filter = tautology();
		this.modifier = DoubleUnaryOperator.identity();
	}

	/**
	 * Get the current value held by the DoubleSink.
	 */
	@Override
	public double get() {
		return value;
	}

	/**
	 * Accept a new value. If the new value passes the DoubleSink's filter, then it
	 * will be passed through the modifier and the DoubleSink's value will be changed
	 * to the result.
	 */
	@Override
	public void accept(double value) {
		if(filter.test(value)) overwriteValue(modifier.applyAsDouble(value));
	}

	/**
	 * Overwrite the value stored in the DoubleSink.
	 *
	 * @param value The new value to store.
	 *
	 * @return The previous value that was stored.
	 */
	protected double overwriteValue(double value) {
		double oldValue = this.value;
		this.value = value;

		return oldValue;
	}

	/**
	 * Set the modifier to be applied to values accepted by the DoubleSink.
	 *
	 * @param modifier The modifier to apply. Should not be null.
	 *
	 * @return The modifier applied.
	 */
	public DoubleSink setModifier(DoubleUnaryOperator modifier) {
		if(modifier == null) {
			ArachneLogger.getInstance().error("Tried to set DoubleSink modifier to null... changing to identity instead");

			this.modifier = DoubleUnaryOperator.identity();
			return this;
		}

		this.modifier = modifier;
		return this;
	}

	/**
	 * Clear the modifier applied to values accepted by the DoubleSink.
	 */
	public void clearModifier() {
		this.modifier = DoubleUnaryOperator.identity();
	}

	/**
	 * Set the filter used to test values accepted by the DoubleSink.
	 *
	 * @param filter The filter to apply. Should not be null.
	 *
	 * @return The filter applied.
	 */
	public DoubleSink setFilter(DoublePredicate filter) {
		if(filter == null) {
			ArachneLogger.getInstance().error("Tried to set DoubleSink filter to null... changing to tautology instead");

			this.filter = tautology();
			return this;
		}

		this.filter = filter;
		return this;
	}

	/**
	 * Clear the filter testing values accepted by the DoubleSink.
	 */
	public void clearFilter() {
		this.filter = tautology();
	}

	/**
	 * Static helper function to return a tautology for filtering.
	 *
	 * @return A DoublePredicate that always returns true.
	 */
	protected static DoublePredicate tautology() {
		return (value) -> true;
	}
}
