/*
 * This file was auto-generated by Arachne's Template Manager.
 * Edits made to this file will be overridden on regeneration.
 *
 * Template file: Pipe.jgn
 * Variable definitions: Pipe.json
 * Label used: Generic
 */
package arachne.lib.pipeline;

import java.util.HashSet;
import java.util.Set;

import java.util.function.Predicate;
import java.util.function.UnaryOperator;

import arachne.lib.io.Settable;

public class Pipe<T> extends Sink<T> implements Source<T>
{
	protected final Set<Settable<T>> outputs;
	protected final Set<Listener<T>> listeners;

	public Pipe(T initialValue) {
		super(initialValue);

		this.outputs = new HashSet<Settable<T>>();
		this.listeners = new HashSet<Listener<T>>();
	}

	@Override
	protected T overwriteValue(T value) {
		T oldValue = super.overwriteValue(value);

		for(Settable<T> output : outputs) output.accept(value);
		for(Listener<T> listener : listeners) listener.onChange(oldValue, value);

		return oldValue;
	}

	@Override
	public Pipe<T> setModifier(UnaryOperator<T> modifier) {
		return (Pipe<T>) super.setModifier(modifier);
	}

	@Override
	public Pipe<T> setFilter(Predicate<T> filter) {
		return (Pipe<T>) super.setFilter(filter);
	}

	@Override
	public <SettableT extends Settable<T>> SettableT attach(SettableT settable) {
		outputs.add(settable);
		return settable;
	}

	@Override
	public <ListenerT extends Listener<T>> ListenerT attachListener(ListenerT listener) {
		listeners.add(listener);
		return listener;
	}

	@Override
	public boolean detach(Settable<T> settable) {
		return outputs.remove(settable);
	}

	@Override
	public boolean detachListener(Listener<T> listener) {
		return listeners.remove(listener);
	}

	@Override
	public void detachAll() {
		outputs.clear();
		listeners.clear();
	}
}
