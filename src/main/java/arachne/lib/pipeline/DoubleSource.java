/*
 * This file was auto-generated by Arachne's Template Manager.
 * Edits made to this file will be overridden on regeneration.
 *
 * Template file: Source.jgn
 * Variable definitions: Source.json
 * Label used: Double
 */
package arachne.lib.pipeline;

import java.util.function.DoubleFunction;
import java.util.function.DoublePredicate;

import arachne.lib.function.DoubleBiPredicate;
import arachne.lib.io.GettableDouble;
import arachne.lib.io.SettableDouble;
import arachne.lib.pipeline.translators.DoubleToBooleanTranslator;
import arachne.lib.pipeline.translators.FromDoubleTranslator;

import arachne.lib.listeners.ReadOnlySignal;
import arachne.lib.listeners.Signal;

public interface DoubleSource extends GettableDouble
{
	<SettableT extends SettableDouble> SettableT attach(SettableT settable);
	<ListenerT extends DoubleListener> ListenerT attachListener(ListenerT listener);

	boolean detach(SettableDouble settable);
	boolean detachListener(DoubleListener listener);
	void detachAll();

	default <U> Source<U> attachTranslator(DoubleFunction<U> translation) {
		return attach(new FromDoubleTranslator<U>(get(), translation));
	}

	default BooleanSource attachTranslatorToBoolean(DoublePredicate translation) {
		return attach(new DoubleToBooleanTranslator(get(), translation));
	}

	default ReadOnlySignal toSignalIf(DoublePredicate condition) {
		Signal signal = new Signal();

		attach((value) -> {
			if(condition.test(value)) signal.fire();
		});

		return signal;
	}

	default ReadOnlySignal toSignalIf(DoubleBiPredicate condition) {
		Signal signal = new Signal();

		attachListener((oldValue, newValue) -> {
			if(condition.test(oldValue, newValue)) signal.fire();
		});

		return signal;
	}
}
