/*
 * This file was auto-generated by Arachne's Template Manager.
 * Edits made to this file will be overridden on regeneration.
 *
 * Template file: Translator.jgn
 * Variable definitions: Translator.json
 * Label used: GenericToDouble
 */
package arachne.lib.pipeline.translators;

import java.util.function.ToDoubleFunction;

import arachne.lib.io.Settable;
import arachne.lib.io.SettableDouble;
import arachne.lib.pipeline.DoubleListener;
import arachne.lib.pipeline.DoubleSource;
import arachne.lib.pipeline.DoublePipe;

public class ToDoubleTranslator<InputT> implements Settable<InputT>, DoubleSource
{
	protected final DoublePipe pipe;
	protected final ToDoubleFunction<InputT> translation;

	public ToDoubleTranslator(InputT initialInputValue, ToDoubleFunction<InputT> translation) {
		this.pipe = new DoublePipe(translation.applyAsDouble(initialInputValue));
		this.translation = translation;
	}

	@Override
	public void accept(InputT value) {
		pipe.accept(translation.applyAsDouble(value));
	}

	@Override
	public double get() {
		return pipe.get();
	}

	@Override
	public <SettableT extends SettableDouble> SettableT attach(SettableT settable) {
		return pipe.attach(settable);
	}

	@Override
	public <ListenerT extends DoubleListener> ListenerT attachListener(ListenerT listener) {
		return pipe.attachListener(listener);
	}

	@Override
	public boolean detach(SettableDouble settable) {
		return pipe.detach(settable);
	}

	@Override
	public boolean detachListener(DoubleListener listener) {
		return pipe.detachListener(listener);
	}

	@Override
	public void detachAll() {
		pipe.detachAll();
	}
}
